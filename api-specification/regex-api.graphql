# ===============================================
# START: Enums

enum ErequestType {
  test,
  match,
  replace,
  getConfig
}

enum EResponseType {
  test,
  match,
  replace,
  config,
  error
}

enum EregexErrorType {
  delimiter,
  modifier,
  pattern
}

#  END:  Enums
# ===============================================
# START: Interfaces

interface IapiResponse {
  """Whether or not the request was OK or not"""
  ok: Boolean,
  """Code for response type success/error type"""
  code: Number,
  """List of results for test of each supplied regex"""
  content: [ResponseBody],
  """Human readable description of success/error type"""
  message: string,
  """Type of content contained in the "content" property"""
  type: EResponseType
}

#  END:  Interfaces
# ===============================================
# START: Types

type Delimiters {
  open: String!,
  close: String!,
}

type Regex {
  id: ID!,
  """Regular expression pattern (without delimiters or modifiers"""
  pattern: String!,
  """Regular expression modifiers"""
  modifiers: String!,
  """Regular expression"""
  delimiters: Delimiters
}

type ConfigMax {
  max: Number!,
  default: Number!
}

type RegexMatchReplace implements Regex {
  id: ID!
  pattern: String!,
  modifiers: String!,
  delimiters: Delimiters,
  """Replacement string/pattern"""
  replace: String!,
  """Whether or not to transform white space escape sequences into their normal white space character equivalents"""
  TransformWhiteSpace: Boolean!
}

type MatchConfig {
  """The maximum Number of characters a captured sub-pattern can be before it is truncated"""
  maxSubMatchLen: Number,
  """The maximum Number of characters the whole matched pattern can be before it is truncated"""
  maxWholeMatchLen: Number
}



# -----------------------------------------------
# START: Request types



type APItestRequest {
  type: ErequestType!,
  """List of regexes to be tested for validity"""
  regexes: [Regex]!
}

type APIreplaceRequest implements APItestRequest {
  type: ErequestType!,
  """List of regexes to apply to sample strings"""
  regexes: [regexMatchReplace]!,
  """List of sample strings to which regexes are to be applied"""
  sampleStrings: [String]!
}

type APImatchRequest implements APIreplaceRequest {
  type: ErequestType!,
  regexes: [regexMatchReplace]!,
  sampleStrings: [String]!
  """Whether or not to apply find/replace sequentially on strings or to apply find/replace to fresh version of original string"""
  chainRegexes: Boolean!,
  """Control how much text is returned for each match"""
  matchConfig: MatchConfig
}



#  END:  Request types
# -----------------------------------------------
# START: Response types




type ApiErrorResponse implements IapiResponse {
  """Whether or not the request was OK or not"""
  ok: false,
  """Code for response type success/error type"""
  code: Number,
  """Error message"""
  content: String!,
  """Human readable description of success/error type"""
  message: string,
  hasTiming: false,
  """
  Type of content contained in the "content" property
  (Should always be "error")
  """
  type: EResponseType
}

type ApiTestResponse implements IapiResponse {
  """Whether or not the request was OK or not"""
  ok: true,
  """Code for response type success/error type"""
  code: Number,
  """List of results for test of each supplied regex"""
  content: [TestResponse],
  """Human readable description of success/error type"""
  message: string,
  hasTiming: false,
  """
  Type of content contained in the "content" property
  (Should always be "test")
  """
  type: EResponseType
}

type ApiMatchResponse implements IapiResponse {
  ok: true,
  code: Number,
  content: [MatchResponse],
  message: string,
  """
  Whether or not contents objects include timings for processing of regexes
  """
  hasTiming: Boolean,
  """
  Type of content contained in the "content" property
  (Should always be "match")
  """
  type: EResponseType
}

type ApiReplaceResponse implements IapiResponse {
  ok: true,
  code: Number,
  content: [ReplaceResponse],
  message: string,
  """
  Whether or not contents objects include timings for processing of regexes
  """
  hasTiming: Boolean,
  """
  Type of content contained in the "content" property
  (Should always be "replace")
  """
  type: EResponseType
}

type ApiConfigResponse implements IapiResponse {
  ok: true,
  code: Number,
  content: UIconfig,
  message: string
  hasTiming: false,
  """
  Type of content contained in the "content" property
  (Should always be "config")
  """
  type: EResponseType
}

# - - - - - - - - - - - - - - - - - - - - - - - -
# START: Response sub-types

type MatchParts {
  key: String | Number,
  value: String
}

type ResponseCapturedMatches {
  wholeMatch: string,
  parts: [MatchParts],
}

type RegexError {
  """Whether or not the engine was able to fix the error"""
  autoRepair: Boolean!,
  """Which part of the regex does this error relate to"""
  type: EregexErrorType!,
  """Message about the given error (cleaned up for user interface)"""
  message: String!
  """
  If there's an issue within the regex pattern.
  badCharacter is the character at which the issue starts
  """
  badCharacter: string,
  """
  If there's an issue within the regex pattern.
  offset is the index of the character at which the issue starts
  """
  offset: Number,
  """Raw error message generated by regex engine"""
  rawMessage: string,
}

type ResponseRegex {
  id: ID!,
  """Whether or not the regex (as a whole) was valid"""
  isValid: Boolean!,
  """Details about errors in regex"""
  error: [RegexError]
}

###
type TestResponse {
  regex: ResponseRegex!
}

type MatchResponse implements TestResponse {
  regex: ResponseRegex!,
  """List of matches for a given regex & supplied strings"""
  matches: [ResponseCapturedMatches]!,
  """Number of miliseconds the matching took the engine to execute (if available for that engine/platform)"""
  duration: Number
}

type ReplaceResponse {
  """List of supplied sample strings, transformed by supplied regexes"""
  transformedSamples: [TransformedSample]!
}

type TransformedSample {
  sample: String!,
  duration: Number
}

"""
UIconfig provides basic config details for the API client to use
to ensure its requests aren't rejected by the server.
"""
type UIconfig {
  regex: {
    """The modifiers allowed by the server/API"""
    modifiers: {
      default: String!,
      allowed: [String]!
    },

    """
    Which delimiters the server/API will allow.
    e.g. If the API is used by a Content Management System or Survey
        engine and that system uses "%" and "{}" as delimiters in it's
        templating, then those characters could be omitted from the
        allowed delimters.
    """
    delimiters: {
      single: [String]!,
      paired: [Delimiters]!,
      default: Delimiters!
    }!,

    """
    Whether or not the "Find" and "Replace" fields in a new
    `<regex-pair>` should custom element should be rendered as a
    single line text input or a multi line textarea
    """
    multiLine: Boolean!,

    """
    Whether or not the "Find" and "Replace" fields in a new
    `<regex-pair>` custom element should be the full width of the
    containing box
    """
    fullWidth: Boolean!
  }
  sample: {
    """Should the sample be split into lots of little pieces?"""
    split: {
      """Whether or not splitting is allowed"""
      allow: Boolean!,

      """Whether or not the sample should be split by default"""
      do: Boolean!,

      """Character to split the sample on"""
      char: String!
    }

    """Should the sample have its white space trimmed?"""
    trim: {
      """Whether or not trimming is allowed"""
      allow: Boolean!,

      """Whether or not the sample should be trimmed by default"""
      do: Boolean!,

      """
      Whether or not the sample should be trimmed before processing
      starts
      """
      before: Boolean!,

      """
      Whether or not the sample should be trimmed after processing
      finishes
      """
      after: Boolean!
    },
    """
    Line end characters differ across platforms. This allows line
    end characters to be converted to whatever is desired by the user
    """
    normaliseLineEnd: {
      """Whether or not normalising line end characters is allowed"""
      allow: Boolean!
      """
      Whether or not the sample's line end characters should be
      normalised by default
      """
      do: Boolean!,
      """Line end character(s) that should be used for line end"""
      char: String!
    }
  },
  returned: {
    """
    When rendering the match results into visible white space labels
    """
    showWhiteSpace: Boolean!,

    maxLength: {
      """
      Maximum number of characters the API will return for a whole match
      [0 = unlimited (default: 300)]
      """
      whole: ConfigMax!,

      """
      Maximum number of characters the API will return for captured
      sub-patterns.
      [0 = unlimited (default: 300)]
      """
      captured: ConfigMax!,

      """
      The maximum number of characters returned with the response for
      a given sample
      [0 = unlimited (default: 0)]
      """
      sample: ConfigMax!
    }
  }

  """
  The following properties are optional because they may leak
  information about the server/API that would enable an attacker
  to more quickly DoS the API
  """
  limit: {
    count: {
      """
      The maximum number of regex pairs the API will process on a
      single request
      [0 = unlimited (default: 0)]
      """
      regex: Number,

      """
      The maximum number of sample strings the API will process on a
      single request
      [0 = unlimited (default: 0)]
      """
      sample: Number,
    }

    maxLength: {
      """
      The maximum number of characters in a single regex string the
      API will allow.
      [0 = unlimited (default: 0)]
      """
      singleRegex: Number,

      """
      The maximum number of characters in a single sample string the
      API will allow.
      [0 = unlimited (default: 0)]
      """
      singleSample: Number,

      """
      The absolute total maximum characters the whole request JSON object
      can be before it's rejected by the API
      [0 = unlimited (default: 0)]
      """
      totalSample: Number,

      """
      The absolute total maximum characters the whole request JSON object
      can be before it's rejected by the API
      [0 = unlimited (default: 0)]
      """
      totalRequest: Number,
    }
  }
}

#  END:  Response sub-types
# - - - - - - - - - - - - - - - - - - - - - - - -


#  END:  Response types
# -----------------------------------------------

#  END:  Types
# ===============================================
# START: Unions

union RegexResponses = TestResponse | MatchResponse | ReplaceResponse

union ResponseBody = [RegexResponses] | UIconfig

#  END:  Unions
# ===============================================
# START: Scalars

#  END:  Scalars
# ===============================================
